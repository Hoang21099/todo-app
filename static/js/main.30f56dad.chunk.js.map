{"version":3,"sources":["utils/index.js","redux/todo/todo.reducer.js","constants/actionTypes.js","redux/app/app.reducer.js","redux/rootReducer.js","actions/index.js","sagas/todo/todoSaga.js","sagas/app/appSaga.js","sagas/index.js","redux/store.js","assets/images/index.js","components/header/index.jsx","components/footer/index.js","components/input/index.jsx","components/Search/index.jsx","redux/todo/todo.selector.js","components/todoItem/index.jsx","components/title/index.jsx","components/blockTodo/index.jsx","constants/statusTodo.js","pages/Main/index.jsx","pages/Login/index.jsx","components/modal/index.jsx","components/appLoading/index.jsx","serviceWorker.js","index.js","App.js","assets/images/2.jpg","assets/images/bg_header.jpg"],"names":["getDate","date","Date","getDay","getMonth","getFullYear","delTodo","todoList","itemToRemove","filter","item","id","updateTodo","itemToEdit","map","INITIAL_STATE","items","todoReducer","state","action","type","payload","loading","appReducer","rootReducer","combineReducers","todos","app","addTodo","text","todo","deleteTodo","editTodo","completeTodo","appLoading","addTodoRequest","watchAddTodo","editTodoRequest","watchEditTodo","deleteTodoRequest","watchDeleteTodo","completeTodoRequest","watchCompleteTodo","newTodo","Math","random","isCompleted","put","takeLatest","setAppLoadingRequest","watchSetAppLoading","rootSaga","all","fork","persitCongig","key","storage","persistedReducer","createLogger","persistReducer","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","run","LOGO","require","BG_HEADER","withRouter","connect","dispatch","setAppLoading","history","className","src","alt","onClick","setTimeout","push","size","color","Footer","Input","value","name","placeholder","onChange","username","password","search","autoComplete","Search","handleChangeText","e","setState","target","handleSubmit","preventDefault","props","onSubmit","this","Button","variant","React","Component","selectTodoList","createSelector","selectTodoItemCompleted","list","selectTodoItemInProcess","Item","handleEdit","isEditting","oldText","textInput","current","focus","oldItem","handleDel","delTodoRequest","handleComplete","createRef","console","log","location","style","marginRight","autoFocus","completed","css","Title","title","todosCompleted","todosInProcess","length","toString","Main","LoginPage","handleLogin","hidden","Modal","useHistory","back","stopPropagation","goBack","position","top","left","bottom","right","background","width","height","padding","border","Boolean","window","hostname","match","ReactDOM","render","basename","useLocation","showModal","path","exact","component","Login","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6RAAO,SAASA,IACZ,IAAMC,EAAO,IAAIC,KACjB,MAAM,GAAN,OAAUD,EAAKE,SAAf,YAA2BF,EAAKG,WAAhC,YAA8CH,EAAKI,eAchD,IAAMC,EAAU,SAACC,EAAUC,GAC9B,OAAOD,EAASE,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOH,EAAaG,OAG/CC,EAAa,SAACL,EAAUM,GACjC,OAAON,EAASO,KAAI,SAAAJ,GAAI,OAAIA,EAAKC,KAAOE,EAAWF,GAAKE,EAAaH,MCnBnEK,EAAgB,CAClBC,MAAO,IAyCIC,EAtCK,WAAoC,IAAnCC,EAAkC,uDAA1BH,EAAeI,EAAW,uCACnD,OAAQA,EAAOC,MACX,ICL0B,yBDMtB,OAAO,eACAF,EADP,CAEIF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBG,EAAOE,YAEvC,ICTuB,sBDUnB,sBACOH,GAEX,ICF6B,wBDGzB,sBACOA,EADP,CAEIF,MAAOV,EAAQY,EAAMF,MAAMG,EAAOE,WAE1C,ICN0B,qBDOtB,sBACOH,GAEX,ICnB2B,sBDoBvB,sBACOA,EADP,CAEIF,MAAOJ,EAAWM,EAAMF,MAAMG,EAAOE,WAE7C,ICvBwB,mBDwBpB,sBACOH,GAEX,ICxB+B,0BDyB3B,sBACOA,EADP,CAEIF,MAAOJ,EAAWM,EAAMF,MAAMG,EAAOE,WAE7C,QAAS,OAAOH,IEvClBH,EAAgB,CAClBO,SAAS,GAcEC,EAXI,WAA+B,IAA9BL,EAA6B,uDAAvBH,EAAcI,EAAS,uCAC7C,OAAOA,EAAOC,MACV,IDauB,kBCZnB,sBACOF,EADP,CAEII,SAASJ,EAAMI,UAEvB,QAAS,OAAO,eAAIJ,KCFbM,EALKC,0BAAgB,CAChCC,MAAOT,EACPU,IAAIJ,I,uBCUKK,EACA,SAACC,GAAD,MAAW,CAChBT,KHjBwB,eGkBxBC,QAASQ,IAHJD,EAKA,SAACE,GAAD,MAAW,CAChBV,KHpB0B,yBGqB1BC,QAASS,IAQJC,EACA,SAACrB,GAAD,MAAU,CACfU,KHpB2B,cGqB3BC,QAASX,IAHJqB,EAKA,SAACrB,GAAD,MAAS,CACdU,KHvB6B,wBGwB7BC,QAASX,IAPJqB,EASH,SAACrB,GAAD,MAAS,CACXU,KH1B0B,uBG8BrBY,EACA,SAACtB,GAAD,MAAU,CACfU,KH1CyB,YG2CzBC,QAASX,IAHJsB,EAKA,SAACtB,GAAD,MAAS,CACdU,KH7C2B,sBG8C3BC,QAASX,IAOJuB,EACA,SAACvB,GAAD,MAAU,CACfU,KHpD6B,gBGqD7BC,QAASX,IAHJuB,EAKA,SAACvB,GAAD,MAAS,CACdU,KHvD+B,0BGwD/BC,QAASX,IAOJwB,EACA,iBAAM,CACXd,KHzD+B,4BGuD1Bc,EAIA,iBAAK,CACVd,KH3DuB,oB,WILrBe,G,WASOC,G,WAIPC,G,WAOOC,G,WAIPC,G,WAQOC,G,WAIPC,G,WAOOC,IA3CjB,SAAUP,EAAehB,GAAzB,uEAGQ,OAHR,SNRyBU,EMUQV,EAAOE,QAA1BsB,ENTH,CACHhC,GAAIiC,KAAKC,OAAO,KAChBhB,OACA5B,KAAMD,IACN8C,aAAa,GMGrB,SAGcC,YAAInB,EAAgBe,IAHlC,uFNRO,IAAkBd,IMQzB,gBASO,SAAUO,IAAV,iEACH,OADG,SACGY,YJvBsB,eIuBMb,GAD/B,uCAIP,SAAUE,EAAgBlB,GAA1B,iEAEQ,OAFR,kBAEc4B,YAAIf,EAAiBb,EAAOE,UAF1C,0GAOO,SAAUiB,IAAV,iEACH,OADG,SACGU,YJ9BuB,YI8BMX,GADhC,uCAIP,SAAUE,EAAkBpB,GAA5B,iEAEQ,OAFR,kBAEc4B,YAAIhB,EAAmBZ,EAAOE,UAF5C,6BAIQ,OAJR,kCAIc0B,YAAIhB,KAJlB,oDAQO,SAAUS,IAAV,iEACH,OADG,SACGQ,YJlCyB,cIkCMT,GADlC,uCAIP,SAAUE,EAAoBtB,GAA9B,iEAEQ,OAFR,kBAEc4B,YAAId,EAAqBd,EAAOE,UAF9C,0GAOO,SAAUqB,KAAV,iEACH,OADG,SACGM,YJjD2B,gBIiDMP,GADpC,uC,gBCvDGQ,I,YAIOC,IAJjB,SAAUD,KAAV,iEACQ,OADR,SACcF,YAAIb,KADlB,wCAIO,SAAUgB,KAAV,iEACH,OADG,SACGF,YLW6B,0BKXMC,IADtC,wC,gBCFUE,IAAV,SAAUA,KAAV,iEACH,OADG,SACGC,YAAI,CACNC,YAAKjB,GACLiB,YAAKb,GACLa,YAAKf,GACLe,YAAKX,IACLW,YAAKH,MANN,wC,aCUDI,GAAe,CACjBC,IAAK,OACLC,aAOEC,IAJSC,uBAAa,IAIHC,YAAeL,GAAa9B,IAE/CoC,GAAiBC,cAEjBC,GAAa,CAACF,IAEdG,GAAQC,sBAAYP,GAAkBQ,+BAAqBC,kBAAe,WAAf,EAAmBJ,MAC9EK,GAAYC,YAAaL,IAG/BH,GAAeS,IAAIlB,I,mEClCNmB,GAAOC,EAAQ,IACfC,GAAYD,EAAQ,ICiDlBE,I,MAAAA,aAAWC,YAAQ,MAJP,SAAAC,GAAQ,MAAI,CACnCC,cAAgB,kBAAMD,EAASzC,SAGTwC,EApCV,SAAC,GAA4B,IAA3BG,EAA0B,EAA1BA,QAAQD,EAAkB,EAAlBA,cAStB,OACI,yBAAKE,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKC,IAAKT,GAAMU,IAAI,KACpB,yBAAKF,UAAU,QACX,uBAAGA,UAAU,QAAb,mBACA,uBAAGA,UAAU,QAAb,+CACA,uBAAGA,UAAU,WAAb,qBAIR,yBAAKA,UAAU,QAAQG,QAnBT,WAClBL,IACAM,YAAW,WACPN,IACAC,EAAQM,KAAK,YACf,OAeM,kBAAC,KAAD,CACIC,KAAM,GACNC,MAAM,QACNP,UAAU,gB,MChCf,SAASQ,KACpB,OACI,yBAAKR,UAAU,UACX,uBAAGA,UAAU,QAAb,UACA,uBAAGA,UAAU,YAAb,8B,mBCEG,SAASS,GAAT,GAA0F,IAAzEC,EAAwE,EAAxEA,MAAOC,EAAiE,EAAjEA,KAAMrE,EAA2D,EAA3DA,KAAMsE,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,SAAoB,EAAVC,OAU1F,OACI,yBAAKhB,UAAU,SARfc,EAAW,kBAAC,KAAD,CAAgBR,KAAM,KAE7BS,EAAW,kBAAC,KAAD,CAAcT,KAAM,KAE3B,kBAAC,KAAD,CAAeA,KAAM,KAQzB,2BACIK,KAAMA,EACNrE,KAAMA,EACNsE,YAAaA,EACbC,SAAUA,EACVI,aAAa,MACbP,MAAOA,K,UClBjBQ,G,YACF,aAAe,IAAD,+BACV,iDAOJC,iBAAmB,SAACC,GAChB,EAAKC,SAAS,CACVtE,KAAMqE,EAAEE,OAAOZ,SAVT,EAcda,aAAe,SAACH,GACZA,EAAEI,iBACG,EAAKpF,MAAMW,OAChB,EAAKsE,SAAS,CACVtE,KAAM,KAGV,EAAK0E,MAAMpE,eAAe,EAAKjB,MAAMW,QAlBrC,EAAKX,MAAQ,CACTW,KAAM,IAJA,E,wEAyBV,OACI,0BAAM2E,SAAUC,KAAKJ,cACjB,yBAAKvB,UAAU,QAWX,kBAACS,GAAD,CACInE,KAAK,OACLqE,KAAK,OACLD,MAAOiB,KAAKvF,MAAMW,KAClB8D,SAAUc,KAAKR,iBACfP,YAAY,+BAEhB,kBAACgB,GAAA,EAAD,CAAQ5B,UAAU,SAAS6B,QAAQ,UAAUvB,KAAK,MAAlD,a,GA9CCwB,IAAMC,WA8DZnC,eAAQ,MAJI,SAACC,GAAD,MAAe,CACtCxC,eAAgB,SAAAN,GAAI,OAAI8C,EAAS/C,EAAgBC,QAGtC6C,CAAkCsB,I,SCzEpCc,GAAiBC,aAC1B,CAHgB,SAAA7F,GAAK,OAAIA,EAAMQ,SAI/B,SAACA,GAAD,OAAWA,EAAMV,SAGRgG,GAA0BD,aACnC,CAACD,KACD,SAACG,EAAKtG,GAAN,OAAWsG,EAAKxG,QAAO,SAAAC,GAAI,OAAIA,EAAKoC,kBAG3BoE,GAA0BH,aACnC,CAACD,KACD,SAACG,EAAKtG,GAAN,OAAWsG,EAAKxG,QAAO,SAAAC,GAAI,OAAKA,EAAKoC,kB,SCOnCqE,I,kBACF,aAAe,IAAD,+BACV,iDAiBJC,WAAa,WAAO,IAAD,EACuB,EAAKlG,MAAnCmG,EADO,EACPA,WAAY3G,EADL,EACKA,KAAM4G,EADX,EACWA,QACtBD,EACA,EAAKlB,SAAS,CACVzF,KAAK,eAAMA,EAAP,CAAamB,KAAMyF,IACvBD,YAAaA,KAIjB,EAAKE,UAAUC,SACf,EAAKD,UAAUC,QAAQC,QAG3B,EAAKtB,SAAS,CACVkB,YAAY,EACZC,QAAS,EAAKpG,MAAMR,KAAKmB,SAjCnB,EAqCdoE,iBAAmB,SAACC,GAChB,IAAMwB,EAAU,EAAKxG,MAAMR,KAC3B,EAAKyF,SAAS,CACVzF,KAAK,eACEgH,EADH,CAEA7F,KAAMqE,EAAEE,OAAOZ,WA1Cb,EA8Cda,aAAe,SAACH,GACZA,EAAEI,kBAIFjE,EAH4B,EAAKkE,MAAzBlE,iBACS,EAAKnB,MAAdR,MAGR,EAAKyF,SAAS,CACVkB,YAAY,KArDN,EAyDdM,UAAY,WAAO,IAAD,EACmB,EAAKpB,OACtCqB,EAFc,EACNA,gBADM,EACUlH,OA1Dd,EA8DdmH,eAAiB,WAAO,IACZpF,EAAwB,EAAK8D,MAA7B9D,oBACA/B,EAAS,EAAKQ,MAAdR,KAER+B,EADkB,eAAQ/B,EAAR,CAAcoC,aAAa,MA/D7C,EAAK5B,MAAQ,CACTmG,YAAY,EACZ3G,KAAM,GACN4G,QAAS,IAEb,EAAKC,UAAYX,IAAMkB,YAPb,E,mFAUO,IACTpH,EAAS+F,KAAKF,MAAd7F,KACR+F,KAAKN,SAAS,CACVzF,SAEJqH,QAAQC,IAAIvB,KAAKF,MAAM0B,Y,+BAuDjB,IAAD,EACwBxB,KAAKvF,MAA1BmG,EADH,EACGA,WAAY3G,EADf,EACeA,KACpB,OACI,yBAAKoE,UAAU,QACX,yBAAKA,UAAU,WACTpE,EAAKoC,YAMH,kBAAC,KAAD,CACIuC,MAAM,UACND,KAAM,GACN8C,MAAO,CAAEC,YAAa,SATT,kBAAC,KAAD,CACjB9C,MAAM,MACND,KAAM,GACN8C,MAAO,CAAEC,YAAa,SASzBd,EACG,0BAAMb,SAAUC,KAAKJ,cACjB,2BACIjF,KAAK,OACLqE,KAAK,OACL2C,WAAS,EACT5C,MAAO9E,EAAKmB,MAAQ,GACpB8D,SAAUc,KAAKR,oBAIvB,uBAAGnB,UAAU,QAAQpE,EAAKmB,OAGlC,yBAAKiD,UAAU,WACTpE,EAAK2H,WACH,yBAAKvD,UAAU,oBACX,kBAAC,cAAD,CACIM,KAAM,GACNkD,IAAK,CAAEH,YAAa,OACpB9C,MAAO,UACP/D,QAAS+F,IAEXA,EAQE,kBAACX,GAAA,EAAD,CAAQ5B,UAAU,SAAS6B,QAAQ,OAAOvB,KAAK,KAAKH,QAASwB,KAAKJ,cAAlE,OAPC3F,EAAKoC,aAAe,kBAAC4D,GAAA,EAAD,CAAQ5B,UAAU,SAAS6B,QAAQ,UAAUvB,KAAK,KAAKH,QAASwB,KAAKoB,gBACtF,kBAAC,KAAD,CACIxC,MAAM,QACND,KAAM,OAQhB1E,EAAKoC,aAAe,kBAAC4D,GAAA,EAAD,CAAQ5B,UAAU,SAAS6B,QAAQ,UAAUvB,KAAK,KAAKH,QAASwB,KAAKW,YACvF,kBAAC,KAAD,CACI/B,MAAM,QACND,KAAM,OAKtB,kBAACsB,GAAA,EAAD,CAAQ5B,UAAU,SAAS6B,QAAQ,SAASvB,KAAK,KAAKH,QAASwB,KAAKkB,WAChE,kBAAC,KAAD,CACItC,MAAM,QACND,KAAM,Y,GAtIfwB,IAAMC,YAqJVnC,eAAQ,MANI,SAAAC,GAAQ,MAAK,CACpCiD,eAAgB,SAAAlH,GAAI,OAAIiE,EAAS5C,EAAmBrB,KACpD2B,gBAAiB,SAAA3B,GAAI,OAAIiE,EAAS3C,EAAiBtB,KACnD+B,oBAAqB,SAAA/B,GAAI,OAAIiE,EAAS1C,EAAqBvB,QAGhDgE,CAAkCyC,I,MCzKlC,SAASoB,GAAT,GAA2B,IAAVC,EAAS,EAATA,MAC5B,OACI,4BAAKA,G,MC2Bb,IAKe9D,gBALS,SAAAxD,GAAK,MAAK,CAC9BuH,eAAgBzB,GAAwB9F,GACxCwH,eAAgBxB,GAAwBhG,MAG7BwD,EAvBf,YAA2D,IAA1C8D,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,eAC9BnI,ECdqB,cDcViI,EAA4BC,EAAiBC,EAC9D,OACI,yBAAK5D,UAAU,aACX,yBAAKA,UAAU,cACX,kBAACyD,GAAD,CAAOC,MAAOA,IACd,8CAAajI,EAASoI,OAAtB,YAEJ,yBAAK7D,UAAU,SAEPvE,EAASO,KAAI,SAACJ,GAAD,OAAU,kBAAC,GAAD,CAAU6C,IAAK7C,EAAKC,GAAGiI,WAAYlI,KAAI,eAAOA,GAAQ2H,UCvBlE,cDuB6EG,YEXvFK,I,4LAEjB,OACE,yBAAK/D,UAAU,SACb,kBAAC,GAAD,MACA,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACb,yCAEF,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAW0D,MDvBU,eCwBrB,kBAAC,GAAD,CAAWA,MDvBU,eCyBvB,kBAAClD,GAAD,W,GAb0BsB,IAAMC,Y,SCElCiC,I,mBACF,WAAYvC,GAAQ,IAAD,+BACf,8CAAMA,KAYVN,iBAAmB,SAACC,GAAO,IAAD,EACEA,EAAEE,OAAlBX,EADc,EACdA,KAAMD,EADQ,EACRA,MACd,EAAKW,SAAL,gBACKV,EAAOD,KAhBG,EAoBnBuD,YAAc,SAAC7C,GAAO,IAAD,EACkB,EAAKK,MAAhC3B,EADS,EACTA,cAAeC,EADN,EACMA,QACvBqB,EAAEI,iBACF1B,IACAM,YAAW,WACPL,EAAQM,KAAK,KACbP,MACD,MA3BY,EA8BnByB,aAAe,WACX0B,QAAQC,IAAI,sBA5BZ,EAAK9G,MAAQ,CACT0E,SAAU,GACVC,SAAU,IALC,E,mFAUfkC,QAAQC,IAAIvB,KAAKF,MAAM0B,Y,+BAyBvB,OACI,yBAAKnD,UAAU,iBACX,yBAAKC,IAAKP,GAAWQ,IAAI,KACzB,yBAAKF,UAAU,QACX,iDACA,0BAAM0B,SAAUC,KAAKsC,aACjB,6BACI,kBAACxD,GAAD,CACIK,UAAQ,EACRH,KAAK,WACLrE,KAAK,OACLsE,YAAY,WACZF,MAAOiB,KAAKvF,MAAM0E,SAClBD,SAAUc,KAAKR,iBACfnB,UAAU,UAEd,kBAACS,GAAD,CACIM,UAAQ,EACRJ,KAAK,WACLrE,KAAK,WACLsE,YAAY,WACZF,MAAOiB,KAAKvF,MAAM2E,SAClBF,SAAUc,KAAKR,iBACfnB,UAAU,UAEd,2BAAOkE,QAAM,EAAE5H,KAAK,SAASoE,MAAM,YAIvC,yBAAKV,UAAU,UACX,sDAEJ,yBAAKA,UAAU,SAASG,QAASwB,KAAKsC,aAClC,uBAAGjE,UAAU,aAAb,aAGR,kCACA,yBAAKA,UAAU,UACX,uBAAGA,UAAU,qBAAb,YAGJ,kBAACQ,GAAD,CAAQR,UAAU,iB,GA7Ed8B,IAAMC,YAwFfpC,gBAAWC,YAAQ,MAJP,SAAAC,GAAQ,MAAK,CACpCC,cAAe,kBAAMD,EAASzC,SAGRwC,CAAkCoE,KChG7C,SAASG,KACpB,IAAIpE,EAAUqE,eAGVC,EAAO,SAAAjD,GACPA,EAAEkD,kBACFvE,EAAQwE,UAEZ,OACI,yBACIpE,QAASkE,EACTjB,MAAO,CACHoB,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPC,WAAY,sBACZC,MAAM,QACNC,OAAO,UAGX,yBACI/E,UAAU,QACVoD,MAAO,CACHoB,SAAU,WACVK,WAAY,OACZJ,IAAK,GACLC,KAAM,MACNE,MAAO,MACPI,QAAS,GACTC,OAAQ,mBAGZ,qCACD,qCACC,4BAAQ3I,KAAK,SAAS6D,QAASkE,GAA/B,W,OC1BhB,IAKezE,gBALY,SAAAxD,GAAK,MAAI,CAChCI,QAASJ,EAAMS,IAAIL,WAIRoD,EAdf,YACI,OAD0B,EAATpD,SAGb,yBAAKwD,UAAU,WACX,kBAAC,aAAD,CAAWM,KAAM,SCAT4E,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2D,oBCXN5F,EAAQ,KAGR6F,IAASC,OACL,kBAAC,KAAD,CAAQC,SAAS,KACb,mBCMO,WACb,IAAMrC,EAAWsC,eACXC,EAAYvC,EAAS/G,OAAS+G,EAAS/G,MAAMsJ,UAGnD,OAFAzC,QAAQC,IAAIC,GAGV,kBAAC,IAAD,CAAUlE,MAAOA,IACf,kBAAC,IAAD,CAAazC,QAAS,KAAM6C,UAAWA,IACrC,6BACE,kBAAC,KAAD,CAAQ8D,SAAUuC,GAAWvC,GAC3B,kBAAC,KAAD,CACEwC,KAAK,IACLC,OAAK,EAILC,UAAW9B,IAEX,kBAAC,GAAD,OAEF,kBAAC,KAAD,CACE4B,KAAK,SACLC,OAAK,EACLC,UAAWC,IAEX,kBAACA,GAAD,OAEF,kBAAC,KAAD,CAAOH,KAAK,YAAYE,UAAWC,IACjC,kBAACA,GAAD,QAGHJ,GAAa,kBAAC,KAAD,CACZC,KAAK,aAEL,kBAACxB,GAAD,QAIJ,kBAAC,GAAD,UD5CA,OAEF4B,SAASC,eAAe,SDqHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EGrInBC,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.30f56dad.chunk.js","sourcesContent":["export function getDate() {\n    const date = new Date();\n    return `${date.getDay()} ${date.getMonth()} ${date.getFullYear()}`;\n}\n\n//TOdo actions\n\nexport function initTodo(text) {\n    return {\n        id: Math.random(1000),\n        text,\n        date: getDate(),\n        isCompleted: false\n    };\n}\n\nexport const delTodo = (todoList, itemToRemove) => {\n    return todoList.filter(item => item.id !== itemToRemove.id);\n};\n\nexport const updateTodo = (todoList, itemToEdit) => {\n    return todoList.map(item => item.id === itemToEdit.id ? itemToEdit : item);\n};\n\n","import * as types from '../../constants/actionTypes';\nimport {delTodo,updateTodo} from '../../utils';\nconst INITIAL_STATE = {\n    items: []\n}\n\nconst todoReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case types.TODO_ADD_SUCCESSED:\n            return {\n                ...state,\n                items: [...state.items, action.payload]\n            }\n        case types.TODO_ADD_FAILED:\n            return{\n                ...state,\n            }\n        case types.TODO_DELETE_SUCCESSED:\n            return{\n                ...state,\n                items: delTodo(state.items,action.payload)\n            }\n        case types.TODO_DELETE_FAILED:\n            return{\n                ...state\n            }\n        case types.TODO_EDIT_SUCCESSED:\n            return{\n                ...state,\n                items: updateTodo(state.items,action.payload)\n            }\n        case types.TODO_EDIT_FAILED:\n            return{\n                ...state\n            }\n        case types.TODO_COMPLETE_SUCCESSED:\n            return{\n                ...state,\n                items: updateTodo(state.items,action.payload)\n            }\n        default: return state;\n    }\n}\n\nexport default todoReducer","/*ToDo action */\n//Add\nexport const TODO_ADD_REQUEST = \"ADD NEW TODO\";\nexport const TODO_ADD_SUCCESSED = \"ADD NEW TODO SUCCESSED\";\nexport const TODO_ADD_FAILED = \"ADD NEW TODO FAILED\";\n// Edit\nexport const TODO_EDIT_REQUEST = \"EDIT TODO\";\nexport const TODO_EDIT_SUCCESSED = \"EDIT TODO SUCCESSED\";\nexport const TODO_EDIT_FAILED = \"EDIT TODO FAILED\";\n//Complete\nexport const TODO_COMPLETE_REQUEST = \"COMPLETE TODO\";\nexport const TODO_COMPLETE_SUCCESSED = \"COMPLETE TODO SUCCESSED\";\nexport const TODO_COMPLETE_FAILED = \"COMPLETE TODO FAILED\";\n//DELETE\nexport const TODO_DELETE_REQUEST = \"DELETE TODO\";\nexport const TODO_DELETE_SUCCESSED = \"DELETE TODO SUCCESSED\";\nexport const TODO_DELETE_FAILED = \"DELETE TODO FAILED\";\n\n/*App Action */\nexport const APP_SET_LOADING_REQUEST = \"APP_SET_LOADING_REQUEST\";\nexport const APP_SET_LOADING = \"APP_SET_LOADING\";\n","import {APP_SET_LOADING} from '../../constants/actionTypes';\nconst INITIAL_STATE = {\n    loading: false\n};\n\nconst appReducer = (state=INITIAL_STATE,action)=>{\n    switch(action.type){\n        case APP_SET_LOADING:\n            return{\n                ...state,\n                loading:!state.loading\n            };\n        default: return {...state};\n    }\n};\n\nexport default appReducer;","import {combineReducers} from 'redux';\n\nimport todoReducer from './todo/todo.reducer';\nimport appReducer from './app/app.reducer';\n\nconst rootReducer = combineReducers({\n    todos: todoReducer,\n    app:appReducer\n});\n\nexport default rootReducer;\n\n","import { \n    TODO_ADD_REQUEST, \n    TODO_ADD_SUCCESSED, \n    TODO_ADD_FAILED ,\n    TODO_DELETE_REQUEST,\n    TODO_DELETE_SUCCESSED,\n    TODO_DELETE_FAILED,\n    TODO_EDIT_REQUEST,\n    TODO_EDIT_SUCCESSED,\n    TODO_EDIT_FAILED,\n    TODO_COMPLETE_REQUEST,\n    TODO_COMPLETE_SUCCESSED,\n    TODO_COMPLETE_FAILED,\n    APP_SET_LOADING,\n    APP_SET_LOADING_REQUEST\n} from '../constants/actionTypes';\n\nexport const addTodo = {\n    request: (text) => ({\n        type: TODO_ADD_REQUEST,\n        payload: text\n    }),\n    success: (todo) => ({\n        type: TODO_ADD_SUCCESSED,\n        payload: todo\n    }),\n    fail: (error) => ({\n        type: TODO_ADD_FAILED,\n        payload: error\n    })\n}\n\nexport const deleteTodo = {\n    request: (item) =>({\n        type: TODO_DELETE_REQUEST,\n        payload: item\n    }),\n    success: (item)=>({\n        type: TODO_DELETE_SUCCESSED,\n        payload: item\n    }),\n    fail: (item)=>({\n        type: TODO_DELETE_FAILED\n    })\n}\n\nexport const editTodo = {\n    request: (item) =>({\n        type: TODO_EDIT_REQUEST,\n        payload: item\n    }),\n    success: (item)=>({\n        type: TODO_EDIT_SUCCESSED,\n        payload: item\n    }),\n    fail: (item)=>({\n        type: TODO_EDIT_FAILED\n    })\n}\n\nexport const completeTodo = {\n    request: (item) =>({\n        type: TODO_COMPLETE_REQUEST,\n        payload: item\n    }),\n    success: (item)=>({\n        type: TODO_COMPLETE_SUCCESSED,\n        payload: item\n    }),\n    fail: (item)=>({\n        type: TODO_COMPLETE_FAILED\n    })\n}\n\nexport const appLoading = {\n    request: () =>({\n        type: APP_SET_LOADING_REQUEST,\n    }),\n    success: ()=>({\n        type: APP_SET_LOADING,\n    }),\n}\n\n\n","import {takeLatest,put} from 'redux-saga/effects';\n\nimport {\n    TODO_ADD_REQUEST,\n    TODO_DELETE_REQUEST, \n    TODO_EDIT_REQUEST,\n    TODO_COMPLETE_REQUEST\n} from '../../constants/actionTypes';\n\n//utils\nimport {initTodo} from '../../utils';\n\n//actions\nimport {addTodo, deleteTodo,editTodo, completeTodo} from '../../actions';\n\nfunction* addTodoRequest(action){\n    try{\n        const newTodo = initTodo(action.payload);\n        yield put(addTodo.success(newTodo));\n    }catch(err){\n\n    }\n}\n\nexport function* watchAddTodo(){\n    yield takeLatest(TODO_ADD_REQUEST,addTodoRequest);\n}\n\nfunction* editTodoRequest(action){\n    try{\n        yield put(editTodo.success(action.payload))\n    }catch(e){\n    }\n}\n\nexport function* watchEditTodo(){\n    yield takeLatest(TODO_EDIT_REQUEST,editTodoRequest)\n}\n\nfunction* deleteTodoRequest(action){\n    try{\n        yield put(deleteTodo.success(action.payload))\n    }catch(e){\n        yield put(deleteTodo.fail())\n    }\n}\n\nexport function* watchDeleteTodo(){\n    yield takeLatest(TODO_DELETE_REQUEST,deleteTodoRequest)\n}\n\nfunction* completeTodoRequest(action){\n    try{\n        yield put(completeTodo.success(action.payload))\n    }catch(e){\n    }\n}\n\nexport function* watchCompleteTodo(){\n    yield takeLatest(TODO_COMPLETE_REQUEST,completeTodoRequest)\n}","import { takeLatest,put} from 'redux-saga/effects';\nimport {appLoading} from '../../actions';\nimport { APP_SET_LOADING_REQUEST} from '../../constants/actionTypes';\nfunction* setAppLoadingRequest(){\n        yield put(appLoading.success());\n}\n\nexport function* watchSetAppLoading(){\n    yield takeLatest(APP_SET_LOADING_REQUEST,setAppLoadingRequest);\n}","import { fork, all } from 'redux-saga/effects';\n\nimport { watchAddTodo, watchDeleteTodo, watchEditTodo, watchCompleteTodo } from './todo/todoSaga';\nimport { watchSetAppLoading} from './app/appSaga';\n\nexport function* rootSaga() {\n    yield all([\n        fork(watchAddTodo),\n        fork(watchDeleteTodo),\n        fork(watchEditTodo),\n        fork(watchCompleteTodo),\n        fork(watchSetAppLoading)\n    ]);\n}","import { createStore, applyMiddleware } from 'redux';\n\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport rootReducer from './rootReducer';\n\nimport { rootSaga } from '../sagas';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nconst persitCongig = {\n    key: 'root',\n    storage\n};\n\nconst logger = createLogger({\n\n});\n\nconst persistedReducer = persistReducer(persitCongig,rootReducer);\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [sagaMiddleware];\n\nconst store = createStore(persistedReducer, composeWithDevTools( applyMiddleware(...middleware)));\nconst persistor = persistStore(store);\n\n\nsagaMiddleware.run(rootSaga);\n\nexport  {\n    store,persistor\n};","export const LOGO = require('./2.jpg');\nexport const BG_HEADER = require('./bg_header.jpg');","import React from 'react';\nimport { AiOutlineLogout } from 'react-icons/ai';\nimport {connect} from 'react-redux';\n\n//action\nimport {appLoading} from '../../actions';\n\n//assets\nimport { LOGO } from '../../assets/images';\nimport {withRouter} from 'react-router-dom';\n\n\nimport './styles.scss';\n\n const Header = ({history,setAppLoading})=> {\n     const handleLogOut = ()=>{\n        setAppLoading();\n        setTimeout(()=>{\n            setAppLoading();\n            history.push('/login');\n        },1000);\n        \n     };\n    return (\n        <div className='header'>\n            <div className='left'>\n                <img src={LOGO} alt='' />\n                <div className='info'>\n                    <p className='name'>Mike - Hoàng</p>\n                    <p className='role'>Xốp que Đì ve Lớp bơ</p>\n                    <p className='address'>Viet Name - HCM</p>\n                </div>\n\n            </div>\n            <div className='right' onClick={handleLogOut}>\n                <AiOutlineLogout\n                    size={70}\n                    color='white'\n                    className='icon'\n                />\n            </div>\n\n        </div>\n    );\n};\n\nconst mapDispatchToProps = dispatch =>({\n    setAppLoading : () => dispatch(appLoading.request())\n});\n\nexport default withRouter(connect(null,mapDispatchToProps)(Header));","import React from 'react';\n\n//Components\n\nimport './styles.scss';\n\nexport default function Footer() {\n    return (\n        <div className=\"footer\">\n            <p className=\"name\">TreVis</p>\n            <p className=\"name-des\">Tre Viet Solution Company</p>\n        </div>\n    )\n}","import React from 'react';\n\nimport {\n    AiOutlineForm,\n    AiOutlineUser,\n    AiOutlineKey\n} from 'react-icons/ai'\n\nimport './styles.scss';\n\n\n\nexport default function Input({ value, name, type, placeholder, onChange, username, password, search }) {\n    const icon = () => (\n\n        username ? <AiOutlineUser  size={30} />\n            :\n            password ? <AiOutlineKey size={30} />\n                :\n                <AiOutlineForm size={30}  />\n\n    )\n    return (\n        <div className=\"input\">\n            {\n                icon()\n            }\n            <input\n                name={name}\n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                autoComplete=\"off\"\n                value={value}\n            />\n        </div>\n\n    )\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\n\n//actions\nimport { addTodo } from '../../actions';\n\n//components\nimport Input from '../input';\n\n//utils\n\n//styles\nimport './styles.scss';\n\nclass Search extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            text: '',\n        };\n    }\n\n    handleChangeText = (e) => {\n        this.setState({\n            text: e.target.value\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.text) return;\n        this.setState({\n            text: ''\n        });\n\n        this.props.addTodoRequest(this.state.text);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='form'>\n                    {/* <div className='input'>\n                        <input\n                            type='text'\n                            name='todo'\n                            value={this.state.text}\n                            onChange={this.handleChangeText}\n                            autoComplete='off'\n                            placeholder='Type something you wana do'\n                        />\n                    </div> */}\n                    <Input\n                        type='text'\n                        name='todo'\n                        value={this.state.text}\n                        onChange={this.handleChangeText}\n                        placeholder='Type something you wana do'\n                    />\n                    <Button className='button' variant='success' size='lg'>\n                        Add\n                    </Button>\n                </div>\n            </form>\n\n        );\n    }\n}\n\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    addTodoRequest: text => dispatch(addTodo.request(text))\n});\n\nexport default connect(null, mapDispatchToProps)(Search);","import {createSelector} from 'reselect';\n\nconst selectTodos = state => state.todos;\n\nexport const selectTodoList = createSelector(\n    [selectTodos],\n    (todos) => todos.items\n)\n\nexport const selectTodoItemCompleted = createSelector(\n    [selectTodoList],\n    (list,id)=>list.filter(item => item.isCompleted)\n)\n\nexport const selectTodoItemInProcess = createSelector(\n    [selectTodoList],\n    (list,id)=>list.filter(item => !item.isCompleted)\n)","import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport { ClipLoader } from 'react-spinners';\nimport {\n    AiFillEdit,\n    AiFillDelete,\n    AiFillPushpin,\n    AiOutlineCheck,\n    AiFillStar\n} from 'react-icons/ai';\n\n//actions\nimport {\n    deleteTodo,\n    editTodo,\n    completeTodo\n} from '../../actions';\n\n\n//styles\nimport './styles.scss';\n\nclass Item extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isEditting: false,\n            item: {},\n            oldText: ''\n        };\n        this.textInput = React.createRef();\n    }\n\n    componentDidMount() {\n        const { item } = this.props;\n        this.setState({\n            item\n        });\n        console.log(this.props.location);\n    }\n\n    handleEdit = () => {\n        const { isEditting, item, oldText } = this.state;\n        if (isEditting) {\n            this.setState({\n                item: { ...item, text: oldText },\n                isEditting: !isEditting\n            });\n            return;\n        }\n        if (this.textInput.current) {\n            this.textInput.current.focus();\n        }\n\n        this.setState({\n            isEditting: true,\n            oldText: this.state.item.text\n        });\n    }\n\n    handleChangeText = (e) => {\n        const oldItem = this.state.item;\n        this.setState({\n            item: {\n                ...oldItem,\n                text: e.target.value\n            }\n        });\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const { editTodoRequest } = this.props;\n        const { item } = this.state;\n\n        editTodoRequest(item);\n        this.setState({\n            isEditting: false\n        });\n    }\n\n    handleDel = () => {\n        const { delTodoRequest, item } = this.props;\n        delTodoRequest(item);\n    }\n\n    handleComplete = () => {\n        const { completeTodoRequest } = this.props;\n        const { item } = this.state;\n        const completeItem = { ...item, isCompleted: true };\n        completeTodoRequest(completeItem);\n    }\n\n\n    render() {\n        const { isEditting, item } = this.state;\n        return (\n            <div className='item'>\n                <div className='content'>\n                    {!item.isCompleted ? <AiFillPushpin\n                        color='red'\n                        size={25}\n                        style={{ marginRight: '5px' }}\n                    />\n                        :\n                        <AiFillStar\n                            color='#f7c300'\n                            size={25}\n                            style={{ marginRight: '5px' }}\n                        />\n                    }\n                    {isEditting ?\n                        <form onSubmit={this.handleSubmit}>\n                            <input\n                                type='text'\n                                name='todo'\n                                autoFocus\n                                value={item.text || ''}\n                                onChange={this.handleChangeText}\n                            />\n                        </form>\n                        :\n                        <p className='text'>{item.text}</p>\n                    }\n                </div>\n                <div className='action'>\n                    {!item.completed &&\n                        <div className='action-inprocess'>\n                            <ClipLoader\n                                size={30}\n                                css={{ marginRight: '5px' }}\n                                color={'#123abc'}\n                                loading={isEditting}\n                            />\n                            {!isEditting ?\n                                !item.isCompleted && <Button className='button' variant='success' size='lg' onClick={this.handleComplete}>\n                                    <AiOutlineCheck\n                                        color='white'\n                                        size={25}\n                                    />\n                                </Button>\n                                :\n                                <Button className='button' variant='info' size='lg' onClick={this.handleSubmit}>\n                                    Ok\n                                 </Button>\n                            }\n                            {!item.isCompleted && <Button className='button' variant='primary' size='lg' onClick={this.handleEdit}>\n                                <AiFillEdit\n                                    color='white'\n                                    size={25}\n                                />\n                            </Button>}\n                        </div>\n                    }\n                    <Button className='button' variant='danger' size='lg' onClick={this.handleDel}>\n                        <AiFillDelete\n                            color='white'\n                            size={25}\n                        />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    delTodoRequest: item => dispatch(deleteTodo.request(item)),\n    editTodoRequest: item => dispatch(editTodo.request(item)),\n    completeTodoRequest: item => dispatch(completeTodo.request(item))\n});\n\nexport default connect(null, mapDispatchToProps)(Item);\n","import React from 'react';\nimport './styles.scss';\n\nexport default function Title({ title }) {\n    return (\n        <h3>{title}</h3>\n    )\n}","import React from 'react';\nimport { statusCompleted } from '../../constants/statusTodo';\n\nimport { selectTodoItemCompleted, selectTodoItemInProcess } from '../../redux/todo/todo.selector';\n\nimport { connect } from 'react-redux';\n\n//components\nimport TodoItem from '../todoItem';\nimport Title from '../title';\n\n//styles\nimport './styles.scss';\n\nfunction Block({ title, todosCompleted, todosInProcess }) {\n    const todoList = title === statusCompleted ? todosCompleted : todosInProcess;\n    return (\n        <div className='blockTodo'>\n            <div className='blockTitle'>\n                <Title title={title} />\n                <span> {`- ${todoList.length} items`}</span>\n            </div>\n            <div className='block'>\n                {\n                    todoList.map((item) => <TodoItem key={item.id.toString()} item={{ ...item }} completed={title === statusCompleted} />)\n\n                }\n            </div>\n        </div>\n\n    );\n}\nconst mapStateToProps = state => ({\n    todosCompleted: selectTodoItemCompleted(state),\n    todosInProcess: selectTodoItemInProcess(state)\n\n});\nexport default connect(mapStateToProps)(Block);","export const statusInProcess = \"In Process\";\nexport const statusCompleted = \"Completed\";","import React from 'react';\n\n//Component\nimport Header from '../../components/header';\nimport Footer from '../../components/footer';\nimport FormInput from '../../components/Search';\nimport BlockTodo from '../../components/blockTodo';\n\nimport { statusInProcess, statusCompleted } from '../../constants/statusTodo';\n\n//style\nimport './styles.scss';\n\nexport default class Main extends React.Component {\n  render() {\n    return (\n      <div className='block'>\n        <Header />\n        <div className='inner'>\n          <div className='title'>\n            <h1>Todo-App</h1>\n          </div>\n          <FormInput />\n          <BlockTodo title={statusInProcess} />\n          <BlockTodo title={statusCompleted} />\n        </div>\n        <Footer />\n      </div>\n\n    )\n  }\n}","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Input from '../../components/input';\nimport Footer from '../../components/footer';\n\n//actions\nimport { appLoading } from '../../actions';\n\n//assets\nimport { BG_HEADER } from '../../assets/images';\n\nimport './styles.scss';\n\nclass LoginPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            password: ''\n        };\n    }\n\n    componentDidMount(){\n        console.log(this.props.location);\n    }\n\n    handleChangeText = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleLogin = (e) => {\n        const { setAppLoading, history } = this.props;\n        e.preventDefault();\n        setAppLoading();\n        setTimeout(() => {\n            history.push('/');\n            setAppLoading();\n        }, 2000);\n    }\n\n    handleSubmit = () => {\n        console.log('Welcome to My Web');\n    }\n\n    render() {\n        return (\n            <div className='section-login'>\n                <img src={BG_HEADER} alt='' />\n                <div className='form'>\n                    <h1>Welcome to us !!!</h1>\n                    <form onSubmit={this.handleLogin}>\n                        <div>\n                            <Input\n                                username\n                                name='username'\n                                type='text'\n                                placeholder='Username'\n                                value={this.state.username}\n                                onChange={this.handleChangeText}\n                                className='input'\n                            />\n                            <Input\n                                password\n                                name='password'\n                                type='password'\n                                placeholder='Password'\n                                value={this.state.password}\n                                onChange={this.handleChangeText}\n                                className='input'\n                            />\n                            <input hidden  type='submit' value='Submit' />\n                        </div>\n\n\n                        <div className='forgot'>\n                            <p>Forgot your password ?</p>\n                        </div>\n                        <div className='button' onClick={this.handleLogin}>\n                            <p className='btn-login'>Sign In</p>\n                        </div>\n                    </form>\n                    <p>or </p>\n                    <div className='button'>\n                        <p className='btn-login sign-up'>Sign Up</p>\n                    </div>\n\n                    <Footer className='footer' />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setAppLoading: () => dispatch(appLoading.request())\n});\n\nexport default withRouter(connect(null, mapDispatchToProps)(LoginPage));","import React from 'react';\n\nimport {\n    useHistory,\n    //useParams\n}from 'react-router-dom';\n\nexport default function Modal() {\n    let history = useHistory();\n    //let { id } = useParams();\n\n    let back = e => {\n        e.stopPropagation();\n        history.goBack();\n    };\n    return (\n        <div\n            onClick={back}\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                bottom: 0,\n                right: 0,\n                background: 'rgba(0, 0, 0, 0.15)',\n                width:'250px',\n                height:'250px'\n            }}\n        >\n            <div\n                className='modal'\n                style={{\n                    position: 'absolute',\n                    background: '#fff',\n                    top: 25,\n                    left: '10%',\n                    right: '10%',\n                    padding: 15,\n                    border: '2px solid #444'\n                }}\n            >\n                <h1>Hello</h1>\n               <h2>World</h2>\n                <button type='button' onClick={back}>\n                    Close\n          </button>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport {connect} from \"react-redux\";\n\n//Spiner\nimport {DotLoader} from 'react-spinners';\n\nimport \"./styles.scss\";\n\nfunction AppLoading({loading}){\n    return(\n        loading &&\n        <div className=\"loading\">\n            <DotLoader size={70} />\n          </div>\n    )\n}\n\nconst mapStateToDispatch = state =>({\n    loading: state.app.loading\n})\n\n\nexport default connect(mapStateToDispatch)(AppLoading);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nrequire('react-web-vector-icons/fonts');\n\n\nReactDOM.render(\n    <Router basename='/'>\n        <App />\n    </Router>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport {\n  Route,\n  Switch,\n  useLocation\n} from 'react-router-dom';\n\n//Pages\nimport Main from './pages/Main';\nimport Login from './pages/Login';\nimport Modal from './components/modal';\n\n//Components\nimport AppLoading from './components/appLoading';\n\nexport default function App() {\n  const location = useLocation();\n  const showModal = location.state && location.state.showModal;\n  console.log(location);\n  //console.log(showModal);\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <div>\n          <Switch location={showModal||location}>\n            <Route\n              path='/'\n              exact\n              // render={()=>\n              //   this.props.currentUser?(<Main/>) : (<Redirect to='/login'/>)\n              // }\n              component={Main}\n            >\n              <Main />\n            </Route>\n            <Route\n              path='/login'\n              exact\n              component={Login}\n            >\n              <Login />\n            </Route>\n            <Route path='/todo/:id' component={Login}>\n              <Login />\n            </Route>\n          </Switch>\n          {showModal && <Route\n            path='/todo/:id'\n          >\n            <Modal />\n          </Route>\n          }\n        </div>\n        <AppLoading />\n      </PersistGate>\n    </Provider>\n  );\n\n}","module.exports = __webpack_public_path__ + \"static/media/2.2779a279.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_header.8ac683ee.jpg\";"],"sourceRoot":""}